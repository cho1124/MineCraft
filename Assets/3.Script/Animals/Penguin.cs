using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//  ★★프리팹과 이름을 맞추기위해 펭귄이라 써놨지만 참새입니다!!!★★
// 참새는 몬가 기존의 움직임이 좋은거 같아서... 그냥 별도로 만들고싶네용....

public class Penguin : MonoBehaviour
{
    private enum State { Idle, Walk, Run, Jump, Chase, TurnLeft, TurnRight, DoubleJump }
    private State currentState; // 참새의 현재상태 

    //참조를 위한 변수
    private Vector3 targetPosition; //참새 목적지
    private Rigidbody rb;

    //이동 및 행동 속성 변수
    public float walkRadius = 10f; //참새가 이동할 수 있는 방황 반경
    public float walkSpeed = 3f; //참새 기본 걸음 속도
    public float runSpeed = 4f; //참새 달릴때 속도
    public float idleTime = 3f; //참새 idle 시간
    public float minWalkTime = 5f; //참새 걷기 최소 시간
    public float maxWalkTime = 8f; //참새 걷기 최대 시간
    public float jumpForce = 4f; //참새 점프할때 힘
    public float detectionDistance = 2f; //참새 탐지 거리
    public float ChaseDuration = 2f; // 쫒아오기 지속 시간

    // 위치 변화 추적을 위한 변수
    private Vector3 lastPosition;
    private float lastPositionCheckTime;
    public float positionCheckInterval = 15f; // 위치를 체크할 간격
    public float minPositionChange = 3f; // 최소 위치 변화

    public bool IsChasingPlayer { get; set; } = false; // 플레이어를 추적 중인지 여부를 저장

    private Coroutine stateCoroutine;
    private int jumpCount = 0; // 점프 횟수 추적

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        lastPosition = transform.position;
        lastPositionCheckTime = Time.time;
        ChangeState(State.Idle); // 초기 상태를 Idle로 설정

    }

    private void Update()
    {
        switch (currentState) // 현재 상태에 따라 다른 행동을 수행합니다.
        {
            case State.Walk:
                Walk();
                break;
            case State.Idle:
                break;
            case State.Run:
                Run();
                break;
            case State.Jump:
                Jump();
                break;
            case State.DoubleJump:
                DoubleJump();
                break;
            case State.Chase:
                Chase();
                break;
            case State.TurnLeft:
                TurnLeft();
                break;
            case State.TurnRight:
                TurnRight();
                break;
        }
        CheckPositionChange(); // 위치 변화를 체크합니다.
    }

    private void FixedUpdate()
    {
        //참새가 뒤집혔을 경우 바로 세우기 
        if (Vector3.Dot(transform.up, Vector3.down) > 0.5f)
        {
            rb.AddTorque(Vector3.right * 10f); // 힘을 가해서 자연스럽게 스도록 유도하는 방법

            /*
            rb.angularVelocity = Vector3.zero;
            rb.velocity = Vector3.zero;
            transform.rotation = Quaternion.Euler(0, transform.rotation.eulerAngles.y, 0);
              오브젝트를 멈추고 각도를 재설정하여 본래 상태로 만들음, 빠르나 부자연스러울 수 있음                   
             
             */
        }
    }

    private void ChangeState(State NewState) // 상태를 변경하는 메서드입니다.
    {
        currentState = NewState; // 현재 상태를 새로운 상태로 변경합니다.
        switch (currentState)
        {
            case State.Walk:
                targetPosition = GetRandomPosition(); // 걷기 상태로 변경될 때 새로운 목표 위치를 설정합니다.
                StartCoroutine(StateDuration(State.Walk, Random.Range(minWalkTime, maxWalkTime))); // 걷기 상태의 지속 시간을 설정합니다.
                break;
            case State.Idle:
                StartCoroutine(StateDuration(State.Idle, Random.Range(4f, 10f))); // 멈춰 있는 상태의 지속 시간을 설정합니다.
                break;
            case State.Run:
                StartCoroutine(StateDuration(State.Run, Random.Range(minWalkTime, maxWalkTime)));
                break;
            case State.Jump:
                rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
                StartCoroutine(StateDuration(State.Jump, 3f));
                break;
            case State.DoubleJump:
                rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
                StartCoroutine(StateDuration(State.DoubleJump, 1f));
                break;
            case State.Chase:
                //  StartCoroutine(StateDuration(MonsterState.Chase, ChaseDuration));
                break;
            case State.TurnLeft:
                StartCoroutine(StateDuration(State.TurnLeft, 1f));
                break;
            case State.TurnRight:
                StartCoroutine(StateDuration(State.TurnRight, 1f));
                break;
        }
    }

    private void Walk() // 걷기 상태에서 수행할 행동을 정의하는 메서드입니다.
    {
        MoveTowardsTarget(walkSpeed); // 목표 위치로 걷기 속도로 이동합니다.
        if (Vector3.Distance(transform.position, targetPosition) < 0.1f) // 목표 위치에 도달했는지 확인합니다.
        {
            ChangeState(State.Idle); // Idle 상태로 변경
        }
    }

    private void Run()  // 달리기 상태에서 수행할 행동을 정의하는 메서드입니다.
    {
        MoveTowardsTarget(runSpeed); // 목표 위치로 달리기 속도로 이동합니다.
        if (Vector3.Distance(transform.position, targetPosition) < 0.1f) // 목표 위치에 도달했는지 확인합니다.
        {
            ChangeState(State.Idle); // Idle 상태로 변경
        }
    }

    private void TurnLeft()
    {
        // 참새를 왼쪽으로 회전
        transform.Rotate(0, -90, 0);
        ChangeState(State.Walk);
    }

    private void TurnRight()
    {
        // 참새를 오른쪽으로 회전
        transform.Rotate(0, 90, 0);
        ChangeState(State.Walk);
    }

    private void Chase()
    {
        MoveTowardsTarget(runSpeed);
        if (Vector3.Distance(transform.position, targetPosition) < 0.1f) // 목표 위치에 도달했는지 확인합니다.
        {
            EndChaseAndWander(); // 추적 종료 후 다른 상태로 전환
        }
    }

    private void Jump()
    {
        if (jumpCount < 1) // 첫 번째 점프인 경우
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            jumpCount++;
            ChangeState(State.Jump);
        }
        else // 두 번째 점프인 경우 (더블 점프)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            jumpCount = 0;
            ChangeState(State.DoubleJump);
        }
    }

    private void DoubleJump()
    {
        rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        ChangeState(State.Idle);
    }

    private void MoveTowardsTarget(float speed) //참새를 targetPosition으로 이동시키는 기능
    {
        // targetPosition과 현재 위치의 차이를 구하고, 방향 벡터로 변환
        Vector3 direction = (targetPosition - transform.position).normalized;

        // direction 벡터를 사용하여 새로운 위치를 계산
        Vector3 newPosition = transform.position + direction * speed * Time.deltaTime;

        // 참새의 현재 위치를 newPosition으로 업데이트
        transform.position = newPosition;

        // 참새가 이동할 때 바라보는 방향을 갱신
        transform.rotation = Quaternion.LookRotation(direction);
    }

    private Vector3 GetRandomPosition() //참새가 이동할 새로운 랜덤 위치를 생성
    {
        Debug.Log($"{name}새로운 목적지를 생성하겠습니다.");
        float randomAngle = Random.Range(0, 360);// 랜덤 각도를 생성합니다.
        Vector3 randomDirection = Quaternion.Euler(0, randomAngle, 0) * Vector3.forward; // 랜덤 방향을 생성합니다.
        Vector3 randomPosition;
        do
        {
            randomPosition = transform.position + randomDirection * walkRadius; // 현재 위치에서 랜덤 방향으로 walkRadius만큼 떨어진 위치를 반환합니다.
        } while (Vector3.Distance(transform.position, randomPosition) < 3f); // 최소 거리 조건 추가
        return randomPosition;
    }

    private IEnumerator StateDuration(State state, float duration) //참새가 특정 상태를 일정 시간 동안 유지하게
    {
        // 지정된 시간(duration)만큼 대기
        yield return new WaitForSeconds(duration);
        // 다음 상태를 랜덤하게 선택
        State nextState = GetRandomState();

        // 새로운 상태로 변경
        ChangeState(nextState);
    }

    private State GetRandomState()  // 랜덤 상태를 선택하는 메서드입니다.
    {
        int randomIndex = Random.Range(0, 9); // jump 상태를 제외한 상태 선택
        switch (randomIndex)
        {
            case 0:
                return State.Walk;
            case 1:
                return State.Run;
            case 2:
                return State.Idle;
            case 3:
            case 7:
            case 4:
            case 8:
                if (jumpCount < 1)
                {
                    return State.Jump;
                }
                else
                {
                    return State.DoubleJump;
                }
            case 5:
                return State.TurnLeft;
            case 6:
                return State.TurnRight;
            default:
                return State.Jump;
        }
    }

    private void CheckPositionChange()  // 위치 변화를 체크하는 메서드입니다.
    {
        if (Time.time - lastPositionCheckTime >= positionCheckInterval) // 마지막으로 위치를 체크한 시간에서 일정 시간이 지났는지 확인합니다.
        {
            float distance = Vector3.Distance(transform.position, lastPosition);// 현재 위치와 마지막 위치 사이의 거리를 계산합니다.
            if (distance < minPositionChange)// 최소 위치 변화보다 적으면
            {
                transform.Rotate(0, 180, 0); // 참새를 180도 회전시킵니다.
                targetPosition = transform.position + transform.forward * walkRadius; // 새로운 목표 위치를 설정합니다.
                ChangeState(State.Walk); // 걷기 상태로 변경합니다.
            }
            lastPosition = transform.position; // 현재 위치를 마지막 위치로 업데이트합니다.
            lastPositionCheckTime = Time.time; // 현재 시간을 마지막 위치 체크 시간으로 업데이트합니다.
        }
    }

    public void SetTarget(Vector3 target)
    {
        targetPosition = target;
        ChangeState(State.Chase);
    }

    public void EndChaseAndWander()
    {
        IsChasingPlayer = false;
        ChangeState(GetRandomState());
    }
}
